library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
dev.off()
library(datasets)  # Load built-in datasets
function (x, ...)
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('C:/Users/belvi/AppData/Local/Temp/Temp1_shiny.rstudio.com-tutorial-master.zip/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
runApp('C:/Users/belvi/AppData/Local/Temp/Temp1_shiny.rstudio.com-tutorial-master.zip/shiny.rstudio.com-tutorial-master/part-1-code')
runApp('C:/Users/belvi/AppData/Local/Temp/Temp1_shiny.rstudio.com-tutorial-master.zip/shiny.rstudio.com-tutorial-master/part-1-code')
runApp('C:/Users/belvi/AppData/Local/Temp/Temp1_shiny.rstudio.com-tutorial-master.zip/shiny.rstudio.com-tutorial-master/part-1-code/02-hist-app.R')
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=400, height=400)
hist(rnorm(input$n))
dev.off()
# Return a list
list(src = outfile,
alt = "This is alternate text")
}, deleteFile = TRUE)
# A dynamically-sized plot
output$plot2 <- renderImage({
# Read plot2's width and height. These are reactive values, so this
# expression will re-run whenever these values change.
width  <- session$clientData$output_plot2_width
height <- session$clientData$output_plot2_height
# A temp file to save the output.
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
hist(rnorm(input$n))
dev.off()
# Return a list containing the filename
list(src = outfile,
width = width,
height = height,
alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=400, height=400)
hist(rnorm(input$n))
dev.off()
# Return a list
list(src = outfile,
alt = "This is alternate text")
}, deleteFile = TRUE)
# A dynamically-sized plot
output$plot2 <- renderImage({
# Read plot2's width and height. These are reactive values, so this
# expression will re-run whenever these values change.
width  <- session$clientData$output_plot2_width
height <- session$clientData$output_plot2_height
# A temp file to save the output.
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
hist(rnorm(input$n))
dev.off()
# Return a list containing the filename
list(src = outfile,
width = width,
height = height,
alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code')
pwd
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
install.packages("EBImage")
library(pacman)
pacman::p_load(EBImage)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
View(ui)
View(ui)
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/shiny.rstudio.com-tutorial-master/part-1-code/01-template.R')
library(shiny); runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
library(shiny); runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
runApp('C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/01-template.R')
percentcsv <- round(read.csv("./images/percent_CollTissFat.csv",header=F),2)
setwd("C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles")
percentcsv <- round(read.csv("./images/percent_CollTissFat.csv",header=F),2)
off1 <- 73
end1 <- 1001
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=percentcsv,aes(x=percentcsv$V1[off1:end1],y=percentcsv$V4[off1:end1], group=1,
text=paste("Fat:$",percentcsv$V4)))
ggplotly(p,tooltip="text")
library(plotly)
ggplotly(p,tooltip="text")
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=percentcsv,aes(x=V1,y=V4, group=1,
text=paste("Fat:$",V4)))
ggplotly(p,tooltip="text")
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=percentcsv,aes(x=V1,y=V4)) +
geom_line(colour = "grey", aes(V1, V3)) +
geom_line(colour = "#408FA6")
ggplotly(p)
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=percentcsv,aes(x=V1,y=V4)) +
geom_line(colour = "grey", aes(V1, V3))
ggplotly(p)
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=data1,aes(x=V1,y=V4)) +
geom_line(colour = colors()[50], aes(V1, V3))+
geom_line(colour = colors()[142])
ggplotly(p)
data1 <- percentcsv[73:1000]
data1 <- percentcsv[73:1000,]
#  lines(percentcsv$V3[83:1001],type = "l",col=colors()[50],lwd=1.5)
#  lines(percentcsv$V2[83:1001],type = "l",col=colors()[84],lwd=1.5)
#  mavgfib=roll_mean(percentcsv$V2,40,fill=0)
#  mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
#  mavgfat=roll_mean(percentcsv$V4,40,fill=0)
#  lines(mavgfib[83:1001],type = "l",col="black",lwd=1)
# lines(mavgfat[83:1001],type = "l",col="black",lwd=1)
# lines(mavgtiss[83:1001],type = "l",col="black",lwd=1)
#
#  legend(400,98,c("Fibrosis","Myocytes","Fat", "Local trend"), lwd=c(2,2,2,2), col=colors()[c(84,50,142,24)], bty="n")
p <- ggplot(data=data1,aes(x=V1,y=V4)) +
geom_line(colour = colors()[50], aes(V1, V3))+
geom_line(colour = colors()[142])
ggplotly(p)
mavgfib=roll_mean(percentcsv$V2,40,fill=0)
mavgtiss=roll_mean(percentcsv$V3,40,fill=0)
m
mavgfat=roll_mean(percentcsv$V4,40,fill=0)
V5 <- mavgfib[73:1000]
V6 <- mavgtiss[73:1000]
V7 <- mavgfat[73:1000]
p <- ggplot(data=data1,aes(x=V1,y=V4)) +
geom_line(colour = colors()[50], aes(V1, V3))+
geom_line(colour = colors()[84], aes(V1, V2))+
geom_line(colour = colors()[24], aes(V1, V5))+
geom_line(colour = colors()[24], aes(V1, V6))+
geom_line(colour = colors()[24], aes(V1, V7))+
geom_line(colour = colors()[142])
ggplotly(p)
runApp('01-template.R')
dev.off()
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
for (i in 11:450){
labelfile <- normalizePath(file.path('C:/Users/belvi/Downloads/study/Matlab_codes/kmeans_out_26Apr/',
paste('label_', sprintf("%05d", i), '.mat', sep='')))
imfile <- normalizePath(file.path('C:/Users/belvi/Downloads/study/Matlab_codes/kmeans_out_26Apr/seg',
paste('Im_', sprintf("%05d", i), '.png', sep='')))
labelmat<- readMat(labelfile)
label <- matrix(unlist(labelmat), ncol = 4140)
png(imfile,width=414,height=249, units="px")
par(mar=rep(0,4))
image(t(apply(label,2,rev)), useRaster=TRUE, axes=FALSE, col = colors()[c(1,84,50,142)])
dev.off()
}
for (i in 451:600){
labelfile <- normalizePath(file.path('C:/Users/belvi/Downloads/study/Matlab_codes/kmeans_out_26Apr/',
paste('label_', sprintf("%05d", i), '.mat', sep='')))
imfile <- normalizePath(file.path('C:/Users/belvi/Downloads/study/Matlab_codes/kmeans_out_26Apr/seg',
paste('Im_', sprintf("%05d", i), '.png', sep='')))
labelmat<- readMat(labelfile)
label <- matrix(unlist(labelmat), ncol = 4140)
png(imfile,width=414,height=249, units="px")
par(mar=rep(0,4))
image(t(apply(label,2,rev)), useRaster=TRUE, axes=FALSE, col = colors()[c(1,84,50,142)])
dev.off()
}
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
runApp('01-template.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='belsys',
token='61610755EDFB505A18A5B92A96900997',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='belsys',
token='61610755EDFB505A18A5B92A96900997',
secret='<SECRET>')
detach("package:rsconnect", unload = TRUE)
rsconnect::setAccountInfo(name='belsys',
token='61610755EDFB505A18A5B92A96900997',
secret='<SECRET>')
rsconnect::setAccountInfo(name='belsys', token='61610755EDFB505A18A5B92A96900997', secret='uKFVTeAN2HtLGkBC3xKwnQmQB6Orn/TaTML+RMpd')
runApp('AppDir')
setwd("C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/AppDir")
runApp()
setwd("C:/Users/belvi/Downloads/study/R_CourseFiles/MyTestFiles/AppDir")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
